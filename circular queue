class MyCircularQueue {
public:
    int cq[3000]={0};
    int f,r,size;
    MyCircularQueue(int k) {
        f=-1;
        r=-1;
        size=k;
    }
    
    bool enQueue(int value) {
        if(isFull())
        {
            return false;
        }
        else
        {
            if(f==-1 && r==-1)
            {   
                f=0;
                r=0;
                cq[r]=value;
            }
            else
            {
                r=(r+1)%size;
                cq[r]=value;
            }
        }
        return true;
    }
    
    bool deQueue() {
        if(!isEmpty())
        {
            if(f==r)
            {
                f=r=-1;
            }
            else
            {
                f=(f+1)%size;
            }
            return true;
        }
        return false;
    }
    
    int Front() {
        if(!isEmpty())
        return cq[f];
        else
        return -1;
    }
    
    int Rear() {
        if (!isEmpty())
        {
            return cq[r];
        }
        return -1;
    }
    
    bool isEmpty() {
        if(f==-1 && r==-1)
        {
            return true;
        }
        return false;
    }
    
    bool isFull() {
        if((r+1)%size==f)
        return true;
        else
        return false;
    }
};

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */
